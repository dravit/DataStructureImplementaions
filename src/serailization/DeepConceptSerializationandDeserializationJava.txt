Deserialization Algorithm
1. Read the class descriptor, if something is wrong then throw InvalidClassException
   1. Things that can go wrong
      1. SerialUID number doesn’t match
      2. Changing package (Effecting the change of full name)
      3. Changing the class name (Effecting the change of full name)
      4. Changing Serializable or Externalizable interface
1. First check whether Externazible interface has been implemented
   1. if implemented then call readExternal
   2. else 
      1. use the first non serializable super class use the default constructor
         1. default constructor if not present, then throw exception
         2. else
            1. Loop from the super to child layout
               1. if super class is not available in serialize stream version then if readObjectNoData is implemented, and call it
               2. if super class is available in serialize stream version
                  1. check if readObject method is there
                     1. if present, then call that
                     2. otherwise do the defaultreadObject


1. Check if readResolve method is there, if there, then call it


Serialization Algorithm
1. Writes out the metadata of the class associated with an instance, and then recursively writes out the description of the 
superclass until it finds java.lang.object.
2. Checks whether the writeReplace method is available, if 
   1. if available, invoke that, and replace old obj with the new obj which has been returned. and write the new metadata information again
   2. else, check if the externalizible interface has been implemented
      1. if yes, then invoke the writeExternal method
      2. else, Loop from the super to child layout
         1. if the writeObject method has been implemented, 
            1. if yes, then invoke writeObject 
            2. else, 
               1. Once it finishes writing the metadata information, it then starts with the actual data associated with the instance. But this time, it starts from the topmost superclass, (first serializable superclass )
               2. It writes the data associated with the instance, starting from the least superclass to the most-derived class.
SerialUID generation
based upon  passes the class name, sorted member names, modifiers, and interfaces


Requirement for Serializable 
1. Serializable is that the first non-serializable superclass in its inheritence hierarchy must have a no-argument constructor.


If SerialUID number is same for prior and newer version, then following
1. Changes allowed (No Exception thrown while deseriliazation && add default the value for the field)
   1. Add or remove field 
   2. Changing class hierarchy(adding or removing)
   3. static to non static and transient to non transient


1. Changes not allowed 
   1. Changing package (Effecting the change of full name)
   2. Changing the class name (Effecting the change of full name)
   3. Changing Serializable or Externalizable interface






Support for class-defined readObjectNoData method
In addition to supporting class-defined writeObject() and readObject() methods, serialization now includes support for class-defined readObjectNoData() methods. Each class-defined readObjectNoData()method is required to have the following signature:
private void readObjectNoData() throws ObjectStreamException;

The readObjectNoData() method is analogous to the class-defined readObject() method, except that (if defined) it is called in cases where the class descriptor for a superclass of the object being deserialized (and hence the object data described by that class descriptor) is not present in the serialization stream. More formally: If object O of class C is being deserialized, and S is a superclass of C in the VM which is deserializing O, then S.readObjectNoData() is invoked by ObjectInputStream during the deserialization of O if and only if the following conditions are true:
1. S implements java.io.Serializable (directly or indirectly).
2. S defines an readObjectNoData() method with the signature listed above.
3. The serialization stream containing O does not include a class descriptor for S among its list of superclass descriptors for C.
Note that readObjectNoData() is never invoked in cases where a class-defined readObject() method could be called, though serializable class implementors can call readObjectNoData() from withinreadObject() as a means of consolidating initialization code.
See the class description in the API specification of ObjectInputStream for more information.


Resources
http://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html
http://docs.oracle.com/javase/8/docs/platform/serialization/spec/input.html
http://www.javaworld.com/article/2076120/java-se/flatten-your-objects.html?page=2
http://www.javaworld.com/article/2071731/core-java/ensure-proper-version-control-for-serialized-objects.html
http://www.cs.rit.edu/usr/local/jdk/docs/technotes/guides/serialization/relnotes.html
http://stackoverflow.com/questions/16261383/delete-field-from-old-java-class-implementing-serializable