 A critical section is a block of code that accesses a shared resource and can't be executed by
 more than one thread at the same time.

 Only one execution thread will access one of the methods of an object declared with the synchronized keyword.
 If another thread tries to access any method declared with the synchronized keyword of the same object,
 it will be suspended until the first thread finishes the execution of the method.

 Static methods have a different behavior. Only one execution thread will access one of the static methods declared
 with the synchronized keyword, but another thread can access other nonstatic methods of an object of that class.
 You have to be very careful with this point, because two threads can access two different synchronized methods if
 one is static and the other one is not. If both methods change the same data, you can have data inconsistency errors.

 The synchronized keyword penalizes the performance of the application, so you must only use it on methods that modify
 shared data in a concurrent environment.

 Static things take class level lock because their exist only only copy for that member per JVM

 When you use the synchronized keyword to protect a block of code, you must pass an object reference as a parameter.
 Normally, you will use the this keyword to reference the object that executes the method, but you can use other
 object references. Normally, these objects will be created exclusively with this purpose

 When you use the synchronized keyword to protect a block of code, you use an object as a parameter.
 JVM guarantees that only one thread can have access to all the blocks of code protected with that object
 (note that we always talk about objects, not about classes)

  A thread can call the wait() method inside a synchronized block of code. If it calls the wait() method outside
  a synchronized block of code, the JVM throws an IllegalMonitorStateException exception.

  IllegalMonitorException is thrown to indicate that a thread has attempted to wait on an object's monitor or to
  notify other threads waiting on an object's monitor without owning the specified monitor.

  When the thread calls the wait() method, the JVM puts the thread to sleep and releases the object that
  controls the synchronized block of code that it's executing and allows the other threads to execute other
  blocks of synchronized code protected by that object. To wake up the thread, you must call the notify() or
  notifyAll() method inside a block of code protected by the same object.

  Advantages of locks over synchronized keyword:

  - It allows the structuring of synchronized blocks in a more flexible way. With the synchronized keyword,
  you have to get and free the control over a synchronized block of code in a structured way. The Lock interfaces
  allow you to get more complex structures to implement your critical section

  - The Lock interfaces provide additional functionality over the synchronized keyword.
  One of the new functionality is implemented by the tryLock() method. This method tries to get the control of the
  lock and if it can't, because it's used by other thread, it returns the lock. With the synchronized keyword,
  when a thread (A) tries to execute a synchronized block of code, if there is another thread (B) executing it,
  the thread (A) is suspended until the thread (B) finishes the execution of the synchronized block. With locks,
  you can execute the tryLock() method. This method returns a Boolean value indicating if there is another thread
  running the code protected by this lock

  - The Lock interfaces allow a separation of read and write operations having multiple readers and only one modifier

  - The Lock interfaces offer better performance than the synchronized keyword.

  When we want to implement a critical section using locks and guarantee that only one execution thread runs
  a block of code, we have to create a ReentrantLock object.

  The Lock interface (and the ReentrantLock class) includes another method to get the control of the lock.
  It's the tryLock() method. The biggest difference with the lock() method is that this method, if the thread
  that uses it can't get the control of the Lock interface, returns immediately and doesn't put the thread to sleep.
  This method returns a boolean value, true if the thread gets the control of the lock, and false if not.

  The ReentrantLock class also allows the use of recursive calls. When a thread has the control of a lock and
  makes a recursive call, it continues with the control of the lock, so the calling to the lock() method will
  return immediately and the thread will continue with the execution of the recursive call. Moreover, we can
  also call other methods.

  One of the most significant improvements offered by locks is the ReadWriteLock interface and the
  ReentrantReadWriteLock class, the unique one that implements it. This class has two locks, one for read
  operations and one for write operations. There can be more than one thread using read operations simultaneously,
  but only one thread can be using write operations. When a thread is doing a write operation, there can't be
  any thread doing  read operations

  As we mentioned previously, the ReentrantReadWriteLock class has two locks, one for read operations
  and one for write operations. The lock used in read operations is obtained with the readLock() method
  declared in the ReadWriteLock interface. This lock is an object that implements the Lock interface, so we
  can use the lock(), unlock(), and tryLock() methods. The lock used in write operations is obtained with
  the writeLock() method declared in the ReadWriteLock interface. This lock is an object that implements
  the Lock interface, so we can use the lock(), unlock(), and tryLock() methods. It is the responsibility
  of the programmer to ensure the correct use of these locks, using them with the same purposes for which
  they were designed. When you get the read lock of a Lock interface, you can't modify the value of the
  variable. Otherwise, you probably will have inconsistency data errors.
  ReentrantReadWriteLock has two classes ReadLock and Write Lock that implements Lock interface.

  The constructor of the ReentrantLock and ReentrantReadWriteLock classes admits a boolean parameter named
  fair that allows you to control the behavior of both classes. The false value is the default value and
  it's called the non-fair mode. In this mode, when there are some threads waiting for a lock
  (ReentrantLock or ReentrantReadWriteLock) and the lock has to select one of them to get the access
  to the critical section, it selects one without any criteria. The true value is called the fair mode.
  In this mode, when there are some threads waiting for a lock (ReentrantLock or ReentrantReadWriteLock)
  and the lock has to select one to get access to a critical section, it selects the thread that has been
  waiting for the most time. Take into account that the behavior explained previously is only used with
  the lock() and unlock() methods. As the tryLock() method doesn't put the thread to sleep if the
  Lock interface is used, the fair attribute doesn't affect its functionality

  All the Condition objects are associated with a lock and are created using the newCondition() method
  declared in the Lock interface. Before we can do any operation with a condition, you have to have the
  control of the lock associated with the condition, so the operations with conditions must be in a block
  of code that begins with a call to a lock() method of a Lock object and ends with an unlock() method of
  the same Lock object. When a thread calls the await() method of a condition, it automatically frees the
  control of the lock, so that another thread can get it and begin the execution of the same, or another
  critical section protected by that lock.

  When a thread calls the signal() or signallAll() methods of a condition, one or all of the threads
  that were waiting for that condition are woken up, but this doesn't guarantee that the condition that
  made them sleep is now true, so you must put the await() calls inside a while loop. You can't leave that
  loop until the condition is true. While the condition is false, you must call await() again.

  The Condition interface has other versions of the await() method, which are as follows:
  - await(long time, TimeUnit unit): The thread will be sleeping until:
      It's interrupted
      Another thread calls the singal() or signalAll() methods  in the condition
      The specified time passes
      The TimeUnit class is an enumeration with the following constants:
          DAYS, HOURS, MICROSECONDS, MILLISECONDS, MINUTES, NANOSECONDS,  and SECONDS
  - awaitUninterruptibly(): The thread will be sleeping until
      another thread  calls the signal() or signalAll() methods, which can't be interrupted
  - awaitUntil(Date date): The thread will be sleeping until:
      It's interrupted
      Another thread calls the singal() or signalAll() methods  in the condition
      The specified date arrives

  You can use conditions with the ReadLock and WriteLock locks of a read/write lock.

  High Level Concurrency Mechanism:

  Semaphores: A semaphore is a counter that controls the access to one or more shared resources.
  This mechanism is one of the basic tools of concurrent programming and is provided by most of the programming languages.

  CountDownLatch: The CountDownLatch class is a mechanism provided by the Java language that allows a thread to wait
  for the finalization of multiple operations.

  CyclicBarrier: The CyclicBarrier class is another mechanism provided by the Java language that allows the synchronization
  of multiple threads in a common point

  Phaser: The Phaser class is another mechanism provided by the Java language that controls the execution of concurrent
  tasks divided in phases. All the threads must finish one phase before they can continue with the next one. This is a new
  feature of the Java 7 API

  Exchanger: The Exchanger class is another mechanism provided by the Java language that provides a point of data interchange
  between two threads






